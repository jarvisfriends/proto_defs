// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: pbs/jarvis/versions/App_info.proto

package versions

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppInfoClient is the client API for AppInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppInfoClient interface {
	// Gets all known apps streamed back
	GetAllAppInfo(ctx context.Context, in *Application, opts ...grpc.CallOption) (AppInfo_GetAllAppInfoClient, error)
	// Requests a specific applications info by the unique ID
	GetAppByID(ctx context.Context, in *AppRequest, opts ...grpc.CallOption) (*Application, error)
}

type appInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewAppInfoClient(cc grpc.ClientConnInterface) AppInfoClient {
	return &appInfoClient{cc}
}

func (c *appInfoClient) GetAllAppInfo(ctx context.Context, in *Application, opts ...grpc.CallOption) (AppInfo_GetAllAppInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &AppInfo_ServiceDesc.Streams[0], "/jarvis.versions.App_info/GetAllAppInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &appInfoGetAllAppInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AppInfo_GetAllAppInfoClient interface {
	Recv() (*Application, error)
	grpc.ClientStream
}

type appInfoGetAllAppInfoClient struct {
	grpc.ClientStream
}

func (x *appInfoGetAllAppInfoClient) Recv() (*Application, error) {
	m := new(Application)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *appInfoClient) GetAppByID(ctx context.Context, in *AppRequest, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := c.cc.Invoke(ctx, "/jarvis.versions.App_info/GetAppByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppInfoServer is the server API for AppInfo service.
// All implementations must embed UnimplementedAppInfoServer
// for forward compatibility
type AppInfoServer interface {
	// Gets all known apps streamed back
	GetAllAppInfo(*Application, AppInfo_GetAllAppInfoServer) error
	// Requests a specific applications info by the unique ID
	GetAppByID(context.Context, *AppRequest) (*Application, error)
	mustEmbedUnimplementedAppInfoServer()
}

// UnimplementedAppInfoServer must be embedded to have forward compatible implementations.
type UnimplementedAppInfoServer struct {
}

func (UnimplementedAppInfoServer) GetAllAppInfo(*Application, AppInfo_GetAllAppInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllAppInfo not implemented")
}
func (UnimplementedAppInfoServer) GetAppByID(context.Context, *AppRequest) (*Application, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppByID not implemented")
}
func (UnimplementedAppInfoServer) mustEmbedUnimplementedAppInfoServer() {}

// UnsafeAppInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppInfoServer will
// result in compilation errors.
type UnsafeAppInfoServer interface {
	mustEmbedUnimplementedAppInfoServer()
}

func RegisterAppInfoServer(s grpc.ServiceRegistrar, srv AppInfoServer) {
	s.RegisterService(&AppInfo_ServiceDesc, srv)
}

func _AppInfo_GetAllAppInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Application)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AppInfoServer).GetAllAppInfo(m, &appInfoGetAllAppInfoServer{stream})
}

type AppInfo_GetAllAppInfoServer interface {
	Send(*Application) error
	grpc.ServerStream
}

type appInfoGetAllAppInfoServer struct {
	grpc.ServerStream
}

func (x *appInfoGetAllAppInfoServer) Send(m *Application) error {
	return x.ServerStream.SendMsg(m)
}

func _AppInfo_GetAppByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppInfoServer).GetAppByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jarvis.versions.App_info/GetAppByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppInfoServer).GetAppByID(ctx, req.(*AppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppInfo_ServiceDesc is the grpc.ServiceDesc for AppInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jarvis.versions.App_info",
	HandlerType: (*AppInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAppByID",
			Handler:    _AppInfo_GetAppByID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllAppInfo",
			Handler:       _AppInfo_GetAllAppInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pbs/jarvis/versions/App_info.proto",
}
